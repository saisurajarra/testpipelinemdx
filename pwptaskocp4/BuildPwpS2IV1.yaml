apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: build-tool
  labels:
    app.kubernetes.io/version: "0.2"
  name: devcoe-php-s2i
spec:
  description: This Task can be used to build a java image
  params:
    - default: image-registry.openshift-image-registry.svc:5000/devcoe-ocp-pipelines/pwp-builder:7.4-ubi8
      description: pwp base image
      name: PWP_IMAGE
      type: string
    - description: image registry name
      name: IMAGE_REGISTRY
      default: devtools.cpggpc.ca:8151
    - description: The name of the business organization.
      name: ORGANIZATION
      type: string
      default: devcoe
    - description: Product group name.
      name: PRODUCT
      type: string
      default: archetype
    - description: The name for the application.
      name: APPLICATION_NAME
      type: string
    - description: Git Commit hash.
      name: COMMIT
      type: string
    - description: Application Version
      name: CPGBUILD_VERSION
    - description: Build
      name: BUILD
      type: string
    - description: App Artifact URL
      name: APP_ARTIFACT_URL
      type: string
    - description: Branch Type
      name: BRANCH
      type: string
    - description: image build Path
      name: image-build-path
      type: string
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
      type: string
    - description: Tag of the image just built
      name: IMAGE_TAG
      type: string
  steps:
    - env:
        - name: HOME
          value: /tekton/home
      image: >-
        registry.redhat.io/ocp-tools-4-tech-preview/source-to-image-rhel8@sha256:98d8cb3a255641ca6a1bce854e5e2460c20de9fb9b28e3cc67eb459f122873dd
      name: generate
      resources: {}
      script: >

        s2i build $(params.image-build-path)/ $(params.PWP_IMAGE) \

        --as-dockerfile /gen-source/Dockerfile.gen --env DOCUMENTROOT=/public
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
      workingDir: $(workspaces.build-dir.path)
    - envFrom:
        - secretRef:
            name: ocp-ss-pipeline-svc-ad
          prefix: AD_
      image: registry.redhat.io/rhel8/buildah@sha256:0a86ecbdfbe86e9d225b7fe4b090a0dd6d323f8afdfdf2bd933ff223ddb53320
      name: build-and-push
      resources: {}
      script: >
        BUILD=$(params.BUILD)

        BRANCH=$(params.BRANCH)

        COMMIT=$(params.COMMIT)

        TAG=$(date +"%Y%m%d")-$(params.CPGBUILD_VERSION)-${BUILD: -5}-${BRANCH:0:3}-${COMMIT:0:5}

        IMAGE=$(params.IMAGE_REGISTRY)/$(params.ORGANIZATION)/$(params.PRODUCT)/$(params.APPLICATION_NAME):${TAG}

        buildah bud --storage-driver=vfs --tls-verify=false --format=docker
        --layers -f /gen-source/Dockerfile.gen -t ${IMAGE} --label AppArtifact=$(params.APP_ARTIFACT_URL) .

        buildah push --storage-driver=vfs --tls-verify=false --format=docker 
        --creds ${AD_username}:${AD_password} --digestfile $(workspaces.build-dir.path)/image-digest 
        ${IMAGE} docker://${IMAGE}

        cat $(workspaces.build-dir.path)/image-digest | tee
        /tekton/results/IMAGE_DIGEST

        echo ${TAG} | tee
        /tekton/results/IMAGE_TAG

      securityContext:
        capabilities:
          add:
            - SETFCAP
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
      workingDir: /gen-source
  volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: gen-source
  workspaces:
    - mountPath: /workspace/build-dir
      name: build-dir
